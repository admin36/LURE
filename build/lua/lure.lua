-- Generated by Haxe 3.4.2 (git build master @ 890f8c7)
local _hx_array_mt = {
  __newindex = function(t,k,v)
    local len = t.length
    t.length =  k >= len and (k + 1) or len
    rawset(t,k,v)
  end
}

local function _hx_tab_array(tab,length)
  tab.length = length
  return setmetatable(tab, _hx_array_mt)
end

local function _hx_anon_newindex(t,k,v) t.__fields__[k] = true; rawset(t,k,v); end
local _hx_anon_mt = {__newindex=_hx_anon_newindex}
local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_anon_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_anon_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_anon_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_anon_newindex, __index=prototype})
end

local _hxClasses = {}
Int = (function() _hxClasses.Int = _hx_o({__fields__={__name__=true},__name__={"Int"}}); return _hxClasses.Int end)();
Dynamic = (function() 
_hxClasses.Dynamic = _hx_o({__fields__={__name__=true},__name__={"Dynamic"}}); return _hxClasses.Dynamic end)();
Float = (function() 
_hxClasses.Float = _hx_e(); return _hxClasses.Float end)();
Float.__name__ = {"Float"}
Bool = (function() 
_hxClasses.Bool = _hx_e(); return _hxClasses.Bool end)();
Bool.__ename__ = {"Bool"}
Class = (function() 
_hxClasses.Class = _hx_o({__fields__={__name__=true},__name__={"Class"}}); return _hxClasses.Class end)();
Enum = _hx_e();

local _hx_exports = _hx_exports or {}
local Array = _hx_e()
local Attr = _hx_e()
local _DOMTokenList = {}
_DOMTokenList.DOMTokenList_Impl_ = _hx_e()
local EventTarget = _hx_e()
local Node = _hx_e()
local Document = _hx_e()
local Element = _hx_e()
local Exceptions = _hx_e()
local HTMLParser = _hx_e()
local List = _hx_e()
local _List = {}
_List.ListNode = _hx_e()
_List.ListIterator = _hx_e()
local _NamedNodeMap = {}
_NamedNodeMap.NamedNodeMap_Impl_ = _hx_e()
local _NodeList = {}
_NodeList.NodeList_Impl_ = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local haxe = {}
haxe.IMap = _hx_e()
haxe.ds = {}
haxe.ds.StringMap = _hx_e()
haxe.io = {}
haxe.io.Eof = _hx_e()
local lua = {}
lua.Boot = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self,0);
end
Array.prototype = _hx_a(
  'join', function(self,sep) 
    local tbl = ({});
    local _gthis = self;
    local cur_length = 0;
    local i = _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
      do return cur_length < _gthis.length end;
    end,next=function(self) 
      cur_length = cur_length + 1;
      do return _gthis[cur_length - 1] end;
    end});
    while (i:hasNext()) do 
      local i1 = i:next();
      _G.table.insert(tbl,Std.string(i1));
      end;
    do return _G.table.concat(tbl,sep) end
  end,
  'push', function(self,x) 
    _G.rawset(self,self.length,x);
    _G.rawset(self,"length",self.length + 1);
    do return _G.rawget(self,"length") end
  end,
  'iterator', function(self) 
    local _gthis = self;
    local cur_length = 0;
    do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
      do return cur_length < _gthis.length end;
    end,next=function(self) 
      cur_length = cur_length + 1;
      do return _gthis[cur_length - 1] end;
    end}) end
  end
)

Attr.new = {}

_DOMTokenList.DOMTokenList_Impl_.new = {}
_DOMTokenList.DOMTokenList_Impl_._new = function() 
  local this1 = Array.new();
  do return this1 end;
end

EventTarget.new = function() 
  local self = _hx_new()
  EventTarget.super(self)
  return self
end
EventTarget.super = function(self) 
end
_hx_exports["EventTarget"] = EventTarget

Node.new = function() 
  local self = _hx_new(Node.prototype)
  Node.super(self)
  return self
end
Node.super = function(self) 
  self.childNodes = _NodeList.NodeList_Impl_._new();
  EventTarget.super(self);
end
_hx_exports["Node"] = Node
Node.prototype = _hx_a(
  'appendChild', function(self,child) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'cloneNode', function(self,deep) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'compareDocumentPosition', function(self,node) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'contains', function(self,node) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'hasChildNodes', function(self) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'insertBefore', function(self,newNode,referenceNode) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'isDefaultNamespace', function(self,namespaceURI) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'isEqualNode', function(self,otherNode) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'isSameNode', function(self,other) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'lookupNamespaceURI', function(self,prefix) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'lookupPrefix', function(self) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'normalize', function(self) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'removeChild', function(self,child) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'replaceChild', function(self,newChild,oldChild) 
    _G.error(Exceptions.NotImplemented,0);
  end
)
Node.__super__ = EventTarget
setmetatable(Node.prototype,{__index=EventTarget.prototype})

Document.new = function() 
  local self = _hx_new(Document.prototype)
  Document.super(self)
  return self
end
Document.super = function(self) 
  Node.super(self);
end
_hx_exports["Document"] = Document
Document.prototype = _hx_a(
  
)
Document.__super__ = Node
setmetatable(Document.prototype,{__index=Node.prototype})

Element.new = function() 
  local self = _hx_new(Element.prototype)
  Element.super(self)
  return self
end
Element.super = function(self) 
  self.tagName = "";
  self.namespaceURI = nil;
  self.localName = "";
  self.innerHTML = "";
  self.id = "";
  self.computedRole = "";
  self.computedName = "";
  self.className = "";
  self.classList = _DOMTokenList.DOMTokenList_Impl_._new();
  self.attributes = _NamedNodeMap.NamedNodeMap_Impl_._new();
  Node.super(self);
end
_hx_exports["Element"] = Element
Element.prototype = _hx_a(
  'getAttribute', function(self,name) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'getAttributeNames', function(self) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'getAttributeNS', function(self,namespace,name) 
    _G.error(Exceptions.NotImplemented,0);
  end,
  'set_innerHTML', function(self,html) 
    _G.error(Exceptions.NotImplemented,0);
  end
)
Element.__super__ = Node
setmetatable(Element.prototype,{__index=Node.prototype})

Exceptions.new = {}
_hx_exports["Exceptions"] = Exceptions

HTMLParser.new = function() 
  local self = _hx_new(HTMLParser.prototype)
  HTMLParser.super(self)
  return self
end
HTMLParser.super = function(self) 
  self.stack = List.new();
end
_hx_exports["HTMLParser"] = HTMLParser
HTMLParser.prototype = _hx_a(
  'parseFromString', function(self,str) 
    local doc = Document.new();
    local input = String.new(str);
    local pos = 0;
    local textBuffer = "";
    while (pos < input.length) do 
      if (input:charAt(pos) == "<") then 
        if (textBuffer.length > 0) then 
          pos = pos + self:openNode(input:substr(pos),3);
        else
          if (self:isCloseNodeAtIndex(input,pos)) then 
            pos = pos + self:closeNode(pos);
          else
            if (self:isCommentNodeAtIndex(input,pos)) then 
              pos = pos + self:openNode(input:substr(pos),8);
            else
              if (self:isCdataNodeAtIndex(input,pos)) then 
                pos = pos + self:openNode(input:substr(pos),4);
              else
                if (self:isDoctypeDeclarationNodeAtIndex(input,pos)) then 
                  pos = pos + self:openNode(input:substr(pos),7);
                else
                  pos = pos + self:openNode(input:substr(pos),1);
                end;
              end;
            end;
          end;
        end;
      else
        textBuffer = textBuffer .. input:charAt(pos);
        pos = pos + 1;
      end;
      end;
    do return doc end
  end,
  'isCloseNodeAtIndex', function(self,input,index) 
    do return input:charAt(index + 1) == "/" end
  end,
  'isCommentNodeAtIndex', function(self,input,index) 
    do return input:indexOf("!--",index) ~= -1 end
  end,
  'isCdataNodeAtIndex', function(self,input,index) 
    do return input:indexOf("![CDATA[",index) ~= -1 end
  end,
  'isDoctypeDeclarationNodeAtIndex', function(self,input,index) 
    do return input:indexOf("!DOCTYPE",index) ~= -1 end
  end,
  'openNode', function(self,input,type) 
    local tmp = type == 1;
    do return 0 end
  end,
  'makeElement', function(self,tagName) 
    do return Element.new() end
  end,
  'closeNode', function(self,index) 
    do return index end
  end
)

List.new = function() 
  local self = _hx_new(List.prototype)
  List.super(self)
  return self
end
List.super = function(self) 
  self.length = 0;
end
List.prototype = _hx_a(
  'iterator', function(self) 
    do return _List.ListIterator.new(self.h) end
  end
)

_List.ListNode.new = {}

_List.ListIterator.new = function(head) 
  local self = _hx_new(_List.ListIterator.prototype)
  _List.ListIterator.super(self,head)
  return self
end
_List.ListIterator.super = function(self,head) 
  self.head = head;
end
_List.ListIterator.prototype = _hx_a(
  'hasNext', function(self) 
    do return self.head ~= nil end
  end,
  'next', function(self) 
    local val = self.head.item;
    self.head = self.head.next;
    do return val end
  end
)

_NamedNodeMap.NamedNodeMap_Impl_.new = {}
_NamedNodeMap.NamedNodeMap_Impl_._new = function() 
  local this1 = haxe.ds.StringMap.new();
  do return this1 end;
end

_NodeList.NodeList_Impl_.new = {}
_NodeList.NodeList_Impl_._new = function() 
  local this1 = Array.new();
  do return this1 end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        do return String.__oldindex[k] end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_a(
  'indexOf', function(self,str,startIndex) 
    if (startIndex == nil) then 
      startIndex = 1;
    else
      startIndex = startIndex + 1;
    end;
    local r = _G.string.find(self,str,startIndex,true);
    if ((r ~= nil) and (r > 0)) then 
      do return r - 1 end;
    else
      do return -1 end;
    end;
  end,
  'toString', function(self) 
    do return self end
  end,
  'charAt', function(self,index) 
    do return _G.string.sub(self,index + 1,index + 1) end
  end,
  'substr', function(self,pos,len) 
    if ((len == nil) or (len > (pos + self.length))) then 
      len = self.length;
    else
      if (len < 0) then 
        len = self.length + len;
      end;
    end;
    if (pos < 0) then 
      pos = self.length + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return _G.string.sub(self,pos + 1,pos + len) end
  end
)

Std.new = {}
Std.string = function(s) 
  do return lua.Boot.__string_rec(s) end;
end

haxe.IMap.new = {}

haxe.ds.StringMap.new = function() 
  local self = _hx_new()
  haxe.ds.StringMap.super(self)
  return self
end
haxe.ds.StringMap.super = function(self) 
  self.v = {}
  self.k = {}
end
haxe.ds.StringMap.__interfaces__ = {haxe.IMap}

haxe.io.Eof.new = {}
haxe.io.Eof.prototype = _hx_a(
  'toString', function(self) 
    do return "Eof" end
  end
)

lua.Boot.new = {}
lua.Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
lua.Boot.printEnum = function(o,s) 
  if (o.length == 2) then 
    do return o[0] end;
  else
    local str = Std.string(o[0]) .. "(";
    s = s .. "\t";
    local _g1 = 2;
    local _g = o.length;
    while (_g1 < _g) do 
      _g1 = _g1 + 1;
      local i = _g1 - 1;
      if (i ~= 2) then 
        str = str .. ("," .. lua.Boot.__string_rec(o[i],s));
      else
        str = str .. lua.Boot.__string_rec(o[i],s);
      end;
      end;
    do return str .. ")" end;
  end;
end
lua.Boot.printClassRec = function(c,result,s) 
  if (result == nil) then 
    result = "";
  end;
  local f = lua.Boot.__string_rec;
  for k,v in pairs(c) do if result ~= '' then result = result .. ', ' end result = result .. k .. ':' .. f(v, s.. '	') end;
  do return result end;
end
lua.Boot.__string_rec = function(o,s) 
  if (s == nil) then 
    s = "";
  end;
  local _g = type(o);
  local _g1 = _g;
  if (_g1) == "boolean" then 
    do return tostring(o) end;
  elseif (_g1) == "function" then 
    do return "<function>" end;
  elseif (_g1) == "nil" then 
    do return "null" end;
  elseif (_g1) == "number" then 
    if (o == _G.math.huge) then 
      do return "Infinity" end;
    else
      if (o == -_G.math.huge) then 
        do return "-Infinity" end;
      else
        if (o ~= o) then 
          do return "NaN" end;
        else
          do return tostring(o) end;
        end;
      end;
    end;
  elseif (_g1) == "string" then 
    do return o end;
  elseif (_g1) == "table" then 
    if (o.__enum__ ~= nil) then 
      do return lua.Boot.printEnum(o,s) end;
    else
      if ((o.toString ~= nil) and not lua.Boot.isArray(o)) then 
        do return o:toString() end;
      else
        if (lua.Boot.isArray(o)) then 
          local o2 = o;
          if (s.length > 5) then 
            do return "[...]" end;
          else
            local _g2 = _hx_tab_array({ }, 0);
            local _g11 = 0;
            while (_g11 < o2.length) do 
              local i = o2[_g11];
              _g11 = _g11 + 1;
              _g2:push(lua.Boot.__string_rec(i,s .. 1));
              end;
            do return "[" .. _g2:join(",") .. "]" end;
          end;
        else
          if (o.__class__ ~= nil) then 
            do return "{" .. lua.Boot.printClassRec(o,"",s .. "\t") .. "}" end;
          else
            local fields = lua.Boot.fieldIterator(o);
            local buffer = ({});
            local first = true;
            _G.table.insert(buffer,"{ ");
            local f = fields;
            while (f:hasNext()) do 
              local f1 = f:next();
              if (first) then 
                first = false;
              else
                _G.table.insert(buffer,", ");
              end;
              _G.table.insert(buffer,"" .. Std.string(f1) .. " : " .. Std.string(o[f1]));
              end;
            _G.table.insert(buffer," }");
            do return _G.table.concat(buffer,"") end;
          end;
        end;
      end;
    end;
  elseif (_g1) == "thread" then 
    do return "<thread>" end;
  elseif (_g1) == "userdata" then 
    do return "<userdata>" end;else
  _G.error("Unknown Lua type",0); end;
end
lua.Boot.fieldIterator = function(o) 
  local tbl = (function() 
    local _hx_1
    if (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__; else 
    _hx_1 = o; end
    return _hx_1
  end )();
  local cur = _G.pairs(tbl);
  local next_valid = function(tbl1,val) 
    while (lua.Boot.hiddenFields[val] ~= nil) do 
      val = cur(tbl1,val);
      end;
    do return val end;
  end;
  local cur_val = next_valid(tbl,cur(tbl,nil));
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur_val;
    cur_val = next_valid(tbl,cur(tbl,cur_val));
    do return ret end;
  end,hasNext=function(self) 
    do return cur_val ~= nil end;
  end}) end;
end
local _hx_string_mt = _G.getmetatable('');
String.__oldindex = _hx_string_mt.__index;
_hx_string_mt.__index = String.__index;
_hx_string_mt.__add = function(a,b) return Std.string(a)..Std.string(b) end;
_hx_string_mt.__concat = _hx_string_mt.__add
_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  Node.ATTRIBUTE_NODE = 2
  Node.CDATA_SECTION_NODE = 4
  Node.COMMENT_NODE = 8
  Node.DOCUMENT_NODE = 9
  Node.DOCUMENT_TYPE_NODE = 10
  Node.DOCUMENT_FRAGMENT_NODE = 11
  Node.ELEMENT_NODE = 1
  Node.ENTITY_REFERENCE_NODE = 5
  Node.ENTITY_NODE = 6
  Node.NOTATION_NODE = 12
  Node.PROCESSING_INSTRUCTION_NODE = 7
  Node.TEXT_NODE = 3
  Exceptions.NotImplemented = "Not Implemented"
  lua.Boot.hiddenFields = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true}
  
end

_hx_static_init();
return _hx_exports
